@page "/login"
@using EventManagement.Frontend.Models
@using EventManagement.Frontend.Services
@using EventManagement.Common.Dto
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IMessageService MessageService

<div class="d-flex justify-content-center mt-5">
    <div class="card shadow-lg" style="width: 24rem;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">Log in</h3>
            <EditForm Model="loginDto" OnValidSubmit="HandleLogin" FormName="LoginForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="form-group mb-3">
                    <label class="form-label">Username</label>
                    <input class="form-control" @bind="loginDto.Username" placeholder="Enter your username" />
                </div>
                <div class="form-group mb-3">
                    <label class="form-label">Password</label>
                    <input class="form-control" @bind="loginDto.Password" type="password" placeholder="Enter your password" />
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-success">Login</button>
                </div>
            </EditForm>
            <p class="text-center mt-4">
                Create new account? <a href="/register" class="text-decoration-none">Register here</a>
            </p>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="text-center mt-3 @(errorMessage.Contains("success") ? "text-success" : "text-danger")">@errorMessage</p>
            }


        </div>
    </div>
</div>

@code {
    private UserLoginDto loginDto = new UserLoginDto();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var success = await AuthService.Login(loginDto);
        errorMessage = success ? "Login successful!" : "Login failed!";
        if (success)
        {
            Navigation.NavigateTo("/");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        errorMessage = MessageService.GetMessage();
    }
}